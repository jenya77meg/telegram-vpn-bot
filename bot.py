import asyncio
import logging

from aiogram import Bot, Dispatcher, F, exceptions
from aiogram.enums import ChatType
from aiogram.types import BotCommand, BotCommandScopeDefault
from aiogram.utils.callback_answer import CallbackAnswerMiddleware
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web

from config import load_config
config = load_config()

from tgbot.handlers import routers_list
from tgbot.middlewares.flood import ThrottlingMiddleware
from utils import broadcaster

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–æ–Ω–Ω—ã–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
from web.server import create_app

logger = logging.getLogger(__name__)

async def on_startup(bot: Bot):
    # 1. –ü–æ–ø—ã—Ç–∫–∞ —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    try:
        await broadcaster.broadcast(bot, [config.tg_bot.admin_id], "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {e}")

    # 2. –ü–æ–ø—ã—Ç–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã
    try:
        await register_commands(bot)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã: {e}")

    # 3. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ (–µ—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω)
    if config.webhook.use_webhook:
        try:
            await bot.set_webhook(
                f"https://{config.webhook.domain}{config.webhook.url}webhook"
            )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ–±—Ö—É–∫: {e}")

async def register_commands(bot: Bot):
    commands = [
        BotCommand(command='start',   description='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†'),
        BotCommand(command='help',    description='–ü–æ–º–æ—â—å'),
        BotCommand(command='vpn',     description='üîë –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á–∏'),
    ]
    try:
        await bot.set_my_commands(commands, BotCommandScopeDefault())
    except exceptions.TelegramNetworkError as e:
        logger.warning(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–∞–Ω–¥: {e}")
    except exceptions.TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–∞–Ω–¥: {e}")
    except Exception as e:
        logger.exception(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–∞–Ω–¥: {e}")

def register_global_middlewares(dp: Dispatcher):
    middlewares = [ThrottlingMiddleware()]
    for m in middlewares:
        dp.message.outer_middleware(m)
        dp.callback_query.outer_middleware(m)
    dp.callback_query.outer_middleware(CallbackAnswerMiddleware())
    dp.message.filter(F.chat.type == ChatType.PRIVATE)

async def _start_web_server():
    # –ó–∞–ø—É—Å–∫–∞–µ–º aiohttp-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è /instruction
    app_web = create_app()
    runner = web.AppRunner(app_web)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', 8080)
    await site.start()
    logger.info("Instruction web server started on port 8080")


def main_webhook():
    from loader import bot, dp

    dp.include_routers(*routers_list)
    dp.startup.register(on_startup)
    register_global_middlewares(dp)

    # –í —Ä–µ–∂–∏–º–µ webhook API –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ –¥—Ä—É–≥–æ–º aiohttp-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
    app = web.Application()
    handler = SimpleRequestHandler(dispatcher=dp, bot=bot)
    handler.register(app, path=f'{config.webhook.url}webhook')
    setup_application(app, dp, bot=bot)
    web.run_app(app, host='vpn_bot', port=config.tg_bot.port)

async def main_polling():
    from loader import bot, dp

    dp.include_routers(*routers_list)
    register_global_middlewares(dp)

    # –°—Ç–∞—Ä—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    await on_startup(bot)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    asyncio.create_task(_start_web_server())

    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞
    try:
        await bot.delete_webhook()
    except exceptions.TelegramNetworkError as e:
        logger.warning(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–µ–±—Ö—É–∫–∞: {e}")

    # –ó–∞–ø—É—Å–∫ polling
    await dp.start_polling(bot)

if __name__ == '__main__':
    if config.webhook.use_webhook:
        main_webhook()
    else:
        try:
            asyncio.run(main_polling())
        except (KeyboardInterrupt, SystemExit):
            logger.error("–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω!")
