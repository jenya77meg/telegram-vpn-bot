# tgbot/handlers/vpn.py

import uuid
from datetime import datetime, timedelta, timezone

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from config import load_config
config = load_config()
from loader import bot
from marzban.client import create_user as mb_create, get_raw_link, extend_user
from tgbot.services.db import (
    create_user, get_user, update_user_subscription,
    clear_user_subscription, activate_trial
)
from tgbot.utils.keyboards import build_main_menu_kb
from tgbot.keyboards.reply import durations_kb, payment_kb, profile_kb
from tgbot.handlers.vpn_settings import NavStates, _create_or_get_key
from tgbot.services.profile_service import build_profile_content

router = Router()

# –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–æ–∫ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π
DAYS_MAP = {
    "üü° 1¬†–º–µ—Å¬†‚Äì¬†100‚ÇΩ": 30,
    "üü¢ 2¬†–º–µ—Å¬†‚Äì¬†200‚ÇΩ": 60,
    "üîµ 3¬†–º–µ—Å¬†‚Äì¬†300‚ÇΩ": 90,
    "üî∂ 6¬†–º–µ—Å¬†‚Äì¬†600‚ÇΩ": 180,
}


@router.message(F.text == "üí≥ –ü—Ä–æ–¥–ª–∏—Ç—å / –ö—É–ø–∏—Ç—å")
async def cmd_profile_buy(message: Message, state: FSMContext):
    """–ò–∑ –ø—Ä–æ—Ñ–∏–ª—è ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await state.clear()
    main_kb = await build_main_menu_kb(message.from_user.id)
    await message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=main_kb)


@router.message(Command("vpn"))
async def cmd_vpn(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /vpn ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await state.clear()
    main_kb = await build_main_menu_kb(message.from_user.id)
    await message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=main_kb)


@router.message(F.text == "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def cmd_profile_menu(message: Message, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ø—Ä–æ—Ñ–∏–ª—å."""
    await state.clear()
    user_id = message.from_user.id
    name = message.from_user.first_name or message.from_user.username or "–¥—Ä—É–≥"
    text, inline_kb, reply_kb = await build_profile_content(user_id, name)

    await message.answer(
        text,
        parse_mode="HTML",
        disable_web_page_preview=True,
        reply_markup=inline_kb,
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_kb)



@router.message(F.text.in_(["–ö—É–ø–∏—Ç—å/–ø—Ä–æ–¥–ª–∏—Ç—å VPN"]))
async def cmd_buy_period(message: Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫ FSM –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞."""
    await state.set_state(NavStates.PERIOD)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=durations_kb)


@router.message(F.text == "üîë –ú–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–∏")
async def cmd_keys(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–ª—é—á."""
    await state.clear()
    await _create_or_get_key(message, days=0)


@router.message(NavStates.PERIOD, F.text.in_(list(DAYS_MAP.keys())))
async def cmd_period_chosen(message: Message, state: FSMContext):
    days = DAYS_MAP[message.text]
    await state.update_data(days=days)
    await state.set_state(NavStates.PAYMENT)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=payment_kb)


@router.message(NavStates.PAYMENT, F.text.in_(["üí≥ –ü–µ—Ä–µ–≤–æ–¥", "‚≠êÔ∏è –¢–µ–ª–µ–≥—Ä–∞–º‚Äë–∑–≤—ë–∑–¥—ã"]))
async def cmd_payment(message: Message, state: FSMContext):
    """–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –æ–ø–ª–∞—Ç–µ –∏ –∑–∞—Ç–µ–º –≤—ã–¥–∞—á–∞/–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –∫–ª—é—á–∞."""
    data = await state.get_data()
    days = data.get("days", 0)
    await state.clear()

    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
    main_kb = await build_main_menu_kb(message.from_user.id)

    if message.text == "üí≥ –ü–µ—Ä–µ–≤–æ–¥":
        await message.answer(
            "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –æ–ø–ª–∞—Ç–µ –ø–µ—Ä–µ–≤–æ–¥–æ–º: –ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –∫–∞—Ä—Ç—É XXXXXX –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç.",
            reply_markup=main_kb,
        )
    else:
        await message.answer(
            "–û–ø–ª–∞—Ç–∞ –∑–≤—ë–∑–¥–∞–º–∏: –Ω–∞–∂–º–∏—Ç–µ ¬´üéÅ –ü–æ–¥–∞—Ä–∏—Ç—å –∑–≤–µ–∑–¥—É¬ª –≤ –ø—Ä–æ—Ñ–∏–ª–µ –±–æ—Ç–∞.",
            reply_markup=main_kb,
        )

    await _create_or_get_key(message, days)


@router.callback_query(F.data == "vpn")
async def cb_open_vpn(callback: CallbackQuery, state: FSMContext):
    """Inline‚Äë–∫–Ω–æ–ø–∫–∞ ¬´–ü—Ä–æ–¥–ª–∏—Ç—å¬ª."""
    await state.set_state(NavStates.PERIOD)
    await callback.answer()
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=durations_kb)


@router.callback_query(F.data == "free_trial_inline")
async def cb_free_trial(callback: CallbackQuery, state: FSMContext):
    """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ 7 –¥–Ω–µ–π (–∫—É–ª–¥–∞—É–Ω 4¬†–º–µ—Å—è—Ü–∞)."""
    await callback.answer()
    user_id = callback.from_user.id
    main_kb = await build_main_menu_kb(user_id)

    # –°–æ–∑–¥–∞—ë–º –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏ –ø–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å
    await create_user(user_id)
    record = await get_user(user_id) or {}
    now = datetime.now(timezone.utc)

    # 0) –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    if record.get("is_trial") and record.get("trial_end"):
        try:
            end_dt = datetime.fromisoformat(record["trial_end"])
            if end_dt > now:
                await callback.message.answer(
                    f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–æ {end_dt.strftime('%d.%m.%Y')}.",
                    reply_markup=main_kb,
                )
                return
        except ValueError:
            pass

    # 1) –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    if record.get("sub_id") and record.get("subscription_end") and not record.get("is_trial", 0):
        try:
            end_dt = datetime.fromisoformat(record["subscription_end"])
            if end_dt > now:
                await callback.message.answer(
                    f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ {end_dt.strftime('%d.%m.%Y')}. –üÔøΩ\
–ª–µ–º–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.",
                    reply_markup=main_kb,
                )
                return
        except ValueError:
            pass

    # 2) –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞ (120 –¥–Ω–µ–π —Å trial_last)
    last_iso = record.get("trial_last")
    if last_iso:
        try:
            last_dt = datetime.fromisoformat(last_iso)
            if now - last_dt < timedelta(days=120):
                await callback.message.answer(
                    "‚ùå –í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4¬†–º–µ—Å—è—Ü–∞.",
                    reply_markup=main_kb,
                )
                return
        except ValueError:
            pass

    # 3) –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–±–Ω–æ–≥–æ –∫–ª—é—á–∞
    sub_id = str(uuid.uuid4())
    expire_dt = now + timedelta(days=7)
    if not await mb_create(sub_id, expire_dt):
        await callback.message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –ø—Ä–æ–±–Ω—ã–π –∫–ª—é—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_kb,
        )
        return

    raw_link = await get_raw_link(sub_id)
    await activate_trial(user_id, sub_id, raw_link, expire_dt.isoformat())

    # 4) –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞
    await callback.message.answer(
        f"üéâ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ 7 –¥–Ω–µ–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n"
        f"üîë –í–∞—à VLESS‚Äë–∫–ª—é—á –¥–æ {expire_dt.strftime('%d.%m.%Y')}:\n"
        f"<pre lang=\"vpn\">{raw_link}</pre>",
        parse_mode="HTML",
        disable_web_page_preview=True,
        reply_markup=main_kb,
    )



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–∫–∏ ¬´–ù–∞–∑–∞–¥¬ª
@router.message(NavStates.PAYMENT, F.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥")
async def cmd_back_from_payment(message: Message, state: FSMContext):
    await state.set_state(NavStates.PERIOD)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=durations_kb)


@router.message(NavStates.PERIOD, F.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥")
async def cmd_back_from_period(message: Message, state: FSMContext):
    await state.clear()
    main_kb = await build_main_menu_kb(message.from_user.id)
    await message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=main_kb)


@router.message(F.text == "üî∑ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def cmd_main_menu(message: Message, state: FSMContext):
    await state.clear()
    main_kb = await build_main_menu_kb(message.from_user.id)
    await message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=main_kb)


@router.message(F.text == "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
async def cmd_instruction(message: Message, state: FSMContext):
    user_id = message.from_user.id
    url = f"http://{config.webhook.domain}/instruction?user_id={user_id}"
    await message.answer(
        f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ –≤–∞—à–∏—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤:\n{url}",
        disable_web_page_preview=True
    )



@router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def cmd_help(message: Message, state: FSMContext):
    await state.clear()
    main_kb = await build_main_menu_kb(message.from_user.id)
    await message.answer("–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @noskillol ‚Äî –æ–Ω –ø–æ–º–æ–∂–µ—Ç!", reply_markup=main_kb)
