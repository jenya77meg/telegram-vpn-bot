# tgbot/handlers/vpn.py

import uuid
from datetime import datetime, timedelta, timezone

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from loader import bot
from marzban.client import create_user as mb_create, get_raw_link, extend_user
from tgbot.services.db import create_user, get_user, update_user_subscription, clear_user_subscription
from tgbot.keyboards.reply import durations_kb, payment_kb, profile_kb
from tgbot.utils.keyboards import build_main_menu_kb  # <-- –∏–º–ø–æ—Ä—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –º–µ–Ω—é

vpn_router = Router()

class NavStates(StatesGroup):
    MAIN = State()
    PERIOD = State()
    PAYMENT = State()


async def _create_or_get_key(message: Message, days: int):
    user_id = message.from_user.id
    # —Å—Ç—Ä–æ–∏–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    main_kb = await build_main_menu_kb(user_id)

    now = datetime.now(timezone.utc)
    await create_user(user_id)
    record = await get_user(user_id)

    # 1‚ÄëA. –ï—Å—Ç—å –¥–µ–π—Å—Ç–≤—É—é—â–∏–π –ø–ª–∞—Ç–Ω—ã–π –∫–ª—é—á –∏ days == 0
    if record and record.get("sub_id") and record.get("subscription_end"):
        end_dt = datetime.fromisoformat(record["subscription_end"])
        is_trial = bool(record.get("is_trial", 0))

        try:
            live_link = await get_raw_link(record["sub_id"])
        except Exception:
            await clear_user_subscription(user_id)
            record = await get_user(user_id)
        else:
            if end_dt > now and days == 0:
                return await message.answer(
                    f"üîë –í–∞—à VLESS‚Äë–∫–ª—é—á –¥–æ {end_dt.strftime('%d.%m.%Y')}:\n"
                    f"<pre lang=\"vpn\">{live_link}</pre>",
                    parse_mode="HTML",
                    disable_web_page_preview=True,
                    reply_markup=main_kb,
                )
            if end_dt > now and not is_trial and days > 0:
                new_expire = end_dt + timedelta(days=days)
                if await extend_user(record["sub_id"], new_expire):
                    new_link = await get_raw_link(record["sub_id"])
                    await update_user_subscription(
                        user_id,
                        record["sub_id"],
                        record["vless_key"],
                        new_expire.isoformat(),
                    )
                    return await message.answer(
                        f"üîë –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –¥–æ {new_expire.strftime('%d.%m.%Y')}:\n"
                        f"<pre lang=\"vpn\">{new_link}</pre>",
                        parse_mode="HTML",
                        disable_web_page_preview=True,
                        reply_markup=main_kb,
                    )

    # 2. –ê–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–±–Ω–∏–∫ (days == 0)
    if days == 0 and record and record.get("trial_sub_id") and record.get("trial_end"):
        trial_end = datetime.fromisoformat(record["trial_end"])
        if trial_end > now:
            try:
                trial_link = await get_raw_link(record["trial_sub_id"])
            except Exception:
                pass
            else:
                return await message.answer(
                    f"üîë –í–∞—à –ø—Ä–æ–±–Ω—ã–π VLESS‚Äë–∫–ª—é—á –¥–æ {trial_end.strftime('%d.%m.%Y')}:\n"
                    f"<pre lang=\"vpn\">{trial_link}</pre>",
                    parse_mode="HTML",
                    disable_web_page_preview=True,
                    reply_markup=main_kb,
                )

    # 3. –ù–µ—Ç –∫–ª—é—á–µ–π –∏ days == 0
    if days <= 0:
        return await message.answer(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ù–∞–∂–º–∏—Ç–µ ¬´–ö—É–ø–∏—Ç—å/–ø—Ä–æ–¥–ª–∏—Ç—å VPN¬ª, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å.",
            reply_markup=main_kb,
        )

    # 4. –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (fallback)
    sub_id = str(uuid.uuid4())
    expire_dt = now + timedelta(days=days)
    if not await mb_create(sub_id, expire_dt):
        return await message.reply("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è VPN‚Äë–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    raw_link = await get_raw_link(sub_id)
    await update_user_subscription(user_id, sub_id, raw_link, expire_dt.isoformat())

    return await message.answer(
        f"üîë –í–∞—à VLESS‚Äë–∫–ª—é—á –¥–æ {expire_dt.strftime('%d.%m.%Y')}:\n"
        f"<pre lang=\"vpn\">{raw_link}</pre>",
        parse_mode="HTML",
        disable_web_page_preview=True,
        reply_markup=main_kb,
    )


@vpn_router.message(Command("vpn"))
async def vpn_main(message: Message, state: FSMContext):
    await state.clear()
    main_kb = await build_main_menu_kb(message.from_user.id)
    await message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=main_kb)


@vpn_router.message(F.text == "–ö—É–ø–∏—Ç—å/–ø—Ä–æ–¥–ª–∏—Ç—å VPN")
async def buy_period(message: Message, state: FSMContext):
    await state.set_state(NavStates.PERIOD)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=durations_kb)


@vpn_router.message(F.text == "üîë –ú–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–∏")
async def on_my_keys(message: Message, state: FSMContext):
    await state.clear()
    await _create_or_get_key(message, days=0)


@vpn_router.message(NavStates.PERIOD, F.text.in_(list(durations_kb.keyboard[0] + durations_kb.keyboard[1])))
async def period_chosen(message: Message, state: FSMContext):
    days_map = {btn.text: d for btn, d in zip(
        durations_kb.keyboard[0] + durations_kb.keyboard[1],
        [30, 60, 90, 180]
    )}
    days = days_map.get(message.text)
    if days is None:
        return
    await state.update_data(days=days)
    await state.set_state(NavStates.PAYMENT)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=payment_kb)


@vpn_router.message(NavStates.PAYMENT, F.text.in_(["üí≥ –ü–µ—Ä–µ–≤–æ–¥", "‚≠êÔ∏è –¢–µ–ª–µ–≥—Ä–∞–º‚Äë–∑–≤—ë–∑–¥—ã"]))
async def do_payment(message: Message, state: FSMContext):
    data = await state.get_data()
    days = data.get("days", 0)
    await state.clear()

    main_kb = await build_main_menu_kb(message.from_user.id)
    if message.text == "üí≥ –ü–µ—Ä–µ–≤–æ–¥":
        await message.answer(
            "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –æ–ø–ª–∞—Ç–µ –ø–µ—Ä–µ–≤–æ–¥–æ–º: –ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –∫–∞—Ä—Ç—É XXXXXX –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç.",
            reply_markup=main_kb,
        )
    else:
        await message.answer(
            "–û–ø–ª–∞—Ç–∞ –∑–≤—ë–∑–¥–∞–º–∏: –Ω–∞–∂–º–∏—Ç–µ ¬´üéÅ –ü–æ–¥–∞—Ä–∏—Ç—å –∑–≤–µ–∑–¥—É¬ª –≤ –ø—Ä–æ—Ñ–∏–ª–µ –±–æ—Ç–∞.",
            reply_markup=main_kb,
        )

    await _create_or_get_key(message, days)


@vpn_router.callback_query(F.data == "vpn")
async def on_vpn_callback(cb: CallbackQuery, state: FSMContext):
    await state.set_state(NavStates.PERIOD)
    await cb.answer()
    await cb.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=durations_kb)


@vpn_router.message(F.text == "üî∑ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def main_menu_btn(message: Message, state: FSMContext):
    await state.clear()
    main_kb = await build_main_menu_kb(message.from_user.id)
    await message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=main_kb)


@vpn_router.message(F.text == "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
async def send_instruction(message: Message, state: FSMContext):
    await state.clear()
    main_kb = await build_main_menu_kb(message.from_user.id)
    await message.answer(
        "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ AmneziaVPN\n"
        "2. –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à VLESS‚Äë–∫–ª—é—á –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n"
        "3. –ü–æ–¥–∫–ª—é—á–∞–π—Ç–µ—Å—å –∏ –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º —á–µ—Ä–µ–∑ VPN",
        reply_markup=main_kb,
    )


@vpn_router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def send_help(message: Message, state: FSMContext):
    await state.clear()
    main_kb = await build_main_menu_kb(message.from_user.id)
    await message.answer(
        "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @noskillol ‚Äî –æ–Ω –ø–æ–º–æ–∂–µ—Ç!",
        reply_markup=main_kb,
    )
