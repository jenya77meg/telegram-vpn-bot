import uuid
from datetime import datetime, timedelta, timezone

from aiogram import Router, F
from aiogram.types import CallbackQuery

from loader import bot
from marzban.client import create_user as mb_create, get_raw_link, get_user_links
from tgbot.services.db import get_user, create_user, activate_trial, clear_trial_history
from tgbot.utils.keyboards import build_main_menu_kb  # –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

user_router = Router()

@user_router.callback_query(F.data == "free_trial_inline")
async def free_inline(cb: CallbackQuery):
    """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø—Ä–æ–±–Ω–∏–∫, –µ—Å–ª–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–æ—à–ª–æ ‚â•¬†4¬†–º–µ—Å—è—Ü–µ–≤."""
    await cb.answer()
    user_id = cb.from_user.id
    main_kb = await build_main_menu_kb(user_id)

    # —Å–æ–∑–¥–∞—ë–º –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    await create_user(user_id)
    record = await get_user(user_id) or {}

    # 0.5) –ï—Å–ª–∏ trial-–∞–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª—ë–Ω –≤ Marzban ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é trial
    if record.get("trial_sub_id"):
        try:
            await get_user_links(record["trial_sub_id"])
        except Exception:
            # –∞–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª—ë–Ω ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–ª—è trial
            await clear_trial_history(user_id)
            # –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å –∏–∑ –ë–î
            record = await get_user(user_id) or {}


    # 1) –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π ‚Äî —Å—Ä–∞–∑—É —É–≤–µ–¥–æ–º–ª—è–µ–º
    if record.get("is_trial") and record.get("trial_end"):
        try:
            end_dt = datetime.fromisoformat(record["trial_end"])
            if end_dt > datetime.now(timezone.utc):
                return await cb.message.answer(
                    f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–æ {end_dt.strftime('%d.%m.%Y')}.",
                    reply_markup=main_kb,
                )
        except ValueError:
            pass

    # 2) –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    if record.get("sub_id") and record.get("subscription_end") and not record.get("is_trial", 0):
        end_dt = datetime.fromisoformat(record["subscription_end"])
        if end_dt > datetime.now(timezone.utc):
            return await cb.message.answer(
                f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ {end_dt.strftime('%d.%m.%Y')}. –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.",
                reply_markup=main_kb,
            )

    # 3) –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞ (120 –¥–Ω–µ–π —Å trial_last)
    last_iso = record.get("trial_last")
    if last_iso:
        last_dt = datetime.fromisoformat(last_iso)
        if datetime.now(timezone.utc) - last_dt < timedelta(days=120):
            return await cb.message.answer(
                "‚ùå –í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4¬†–º–µ—Å—è—Ü–∞.",
                reply_markup=main_kb,
            )

    # 4) –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–±–Ω—ã–π –∫–ª—é—á
    sub_id = str(uuid.uuid4())
    expire_dt = datetime.now(timezone.utc) + timedelta(days=7)
    if not await mb_create(sub_id, expire_dt):
        return await cb.message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –ø—Ä–æ–±–Ω—ã–π –∫–ª—é—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_kb,
        )
    raw_link = await get_raw_link(sub_id)
    await activate_trial(user_id, sub_id, raw_link, expire_dt.isoformat())

    return await cb.message.answer(
        f"üéâ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ 7 –¥–Ω–µ–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n"
        f"üîë –í–∞—à VLESS‚Äë–∫–ª—é—á –¥–æ {expire_dt.strftime('%d.%m.%Y')}:\n"
        f"<pre lang=\"vpn\">{raw_link}</pre>",
        parse_mode="HTML",
        disable_web_page_preview=True,
        reply_markup=main_kb,
    )
