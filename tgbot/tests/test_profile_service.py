import pytest
import datetime
from datetime import timezone
from aiogram.utils.keyboard import InlineKeyboardMarkup

import tgbot.services.profile_service as svc

@pytest.mark.asyncio
async def test_active_paid_subscription(monkeypatch):
    # –î–µ–π—Å—Ç–≤—É—é—â–∞—è –ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ (–æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–Ω–µ–π –±–æ–ª—å—à–µ 10) ‚Äî –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –Ω–µ—Ç
    future = (datetime.datetime.now(timezone.utc) + datetime.timedelta(days=20)).isoformat()
    record = {'sub_id': 'sub1', 'subscription_end': future, 'is_trial': False}
    async def dummy_get_user(uid):
        return record
    monkeypatch.setattr(svc, 'get_user', dummy_get_user)
    async def dummy_get_raw_link(sub):
        return 'link'
    monkeypatch.setattr(svc, 'get_raw_link', dummy_get_raw_link)

    text, inline_kb, reply_kb = await svc.build_profile_content(123)

    assert 'üî∏ –¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏: <b>–ø–ª–∞—Ç–Ω–∞—è</b>' in text
    # –ü—Ä–∏ –±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –¥–Ω–µ–π –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –Ω–µ—Ç
    assert inline_kb is None
    assert reply_kb is not None
    assert reply_kb is not None

@pytest.mark.asyncio
async def test_near_expiry_paid(monkeypatch):
    # –û—Å—Ç–∞–ª–æ—Å—å 5 –¥–Ω–µ–π ‚Äî –∫–Ω–æ–ø–∫–∞ –ü—Ä–æ–¥–ª–∏—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å
    future = (datetime.datetime.now(timezone.utc) + datetime.timedelta(days=5)).isoformat()
    record = {'sub_id': 'sub1', 'subscription_end': future, 'is_trial': False}
    async def dummy_get_user(uid):
        return record
    monkeypatch.setattr(svc, 'get_user', dummy_get_user)
    async def dummy_get_raw_link(sub):
        return 'link'
    monkeypatch.setattr(svc, 'get_raw_link', dummy_get_raw_link)

    text, inline_kb, _ = await svc.build_profile_content(123)
    assert isinstance(inline_kb, InlineKeyboardMarkup)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ —Å callback_data 'vpn' –µ—Å—Ç—å —Å—Ä–µ–¥–∏ –∫–Ω–æ–ø–æ–∫
    buttons = [btn.callback_data for row in inline_kb.inline_keyboard for btn in row]
    assert 'vpn' in buttons

@pytest.mark.asyncio
async def test_expired_trial(monkeypatch):
    # –ü—Ä–æ–±–Ω—ã–π –∏—Å—Ç—ë–∫
    past = (datetime.datetime.now(timezone.utc) - datetime.timedelta(days=1)).isoformat()
    record = {'is_trial': True, 'trial_sub_id': 'trial1', 'trial_end': past}
    async def dummy_get_user(uid):
        return record
    monkeypatch.setattr(svc, 'get_user', dummy_get_user)
    async def dummy_clear_user_subscription(uid, trial=True):
        return None
    monkeypatch.setattr(svc, 'clear_user_subscription', dummy_clear_user_subscription)
    async def dummy_get_raw_link(sub):
        return 'link'
    monkeypatch.setattr(svc, 'get_raw_link', dummy_get_raw_link)

    text, inline_kb, _ = await svc.build_profile_content(123)
    assert 'üî∏ –¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏: <b>–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</b>' in text
    assert inline_kb is None
