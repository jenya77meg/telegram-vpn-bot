from datetime import datetime, timedelta

from aiogram import Router, F, types
from aiogram import Dispatcher
from aiogram.types import CallbackQuery, Message

from keyboards import get_payment_keyboard, get_pay_keyboard, get_buy_menu_keyboard
from utils import goods, yookassa, cryptomus, marzban_api
from db.methods import can_get_test_sub, update_test_subscription_state, get_marzban_profile_db
import glv

router = Router(name="callbacks-router") 

# –†—É—Å—Å–∫–∏–µ —Å—Ç—Ä–æ–∫–∏
TEXT_TO_BE_PAID_RUB = "–ö –æ–ø–ª–∞—Ç–µ - {amount}‚ÇΩ ‚¨áÔ∏è"
TEXT_TO_BE_PAID_USD = "–ö –æ–ø–ª–∞—Ç–µ - {amount}$ ‚¨áÔ∏è"
TEXT_CHOOSE_TARIFF_CB = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ ‚¨áÔ∏è"
TEXT_ALREADY_USED_TRIAL = "–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥."
TEXT_PROFILE_NOT_FOUND_ERROR = "–û—à–∏–±–∫–∞: –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ /start –µ—â–µ —Ä–∞–∑."
TEXT_TRIAL_SUCCESS = (
    "–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –≤—ã–±–æ—Ä ‚ù§Ô∏è\nÔ∏è\n"
    # "<a href=\"{link}\">–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å</a>, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∞–Ω–æ–Ω—Å—ã ‚úÖ\nÔ∏è\n"
    "–í–∞—à–∞ 7-–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ \"–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å üë§\"."
)
TEXT_TRIAL_ACTIVATED_ALERT = "7-–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å üë§'."
TEXT_TRIAL_ACTIVATION_ERROR = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞."
TEXT_SELECT_PAYMENT_METHOD = "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã ‚¨áÔ∏è"
TEXT_HAS_ACTIVE_PAID_SUB = "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ {expire_date}."

# –¢–µ–∫—Å—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è FAQ (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ –¥–ª—è alerts)
FAQ_A1_TEXT = "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ¬ª –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é (–∫–æ–º–∞–Ω–¥–∞ /start). –ë–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç –≤–∞–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ—Å—Ç—É–ø –Ω–∞ 7 –¥–Ω–µ–π. –¢–µ—Å—Ç –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –æ–¥–∏–Ω —Ä–∞–∑.¬ª"
FAQ_A2_TEXT = "–ù–∞—à VPN –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞ Android, iOS, Windows –∏ macOS.\n–ü–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ (–≤–∫–ª—é—á–∞—è —Ç–µ—Å—Ç–æ–≤—É—é) –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å üë§¬ª."
FAQ_A3_TEXT = "–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã –∏ —Ü–µ–Ω—ã —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É üõí¬ª –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.\n–°–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ 1, 3 –∏ 6 –º–µ—Å—è—Ü–µ–≤."
FAQ_A4_TEXT = "–ò–Ω—Ñ–æ –æ –ø–æ–¥–ø–∏—Å–∫–µ (—Ç–∏–ø, —Å—Ç–∞—Ç—É—Å, –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è)\n–Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å üë§¬ª."
FAQ_A5_TEXT = "–ú—ã –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç—Ä–∞—Ñ–∏–∫.\n–°—Ç—Ä–µ–º–∏–º—Å—è –æ–±–µ—Å–ø–µ—á–∏—Ç—å –º–∞–∫—Å. —Å–∫–æ—Ä–æ—Å—Ç—å –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö."
FAQ_A6_TEXT = "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã,\n–≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π ¬´–ü–æ–¥–¥–µ—Ä–∂–∫–∞ ‚ù§Ô∏è¬ª –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.\n–ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –ø–æ–º–æ—á—å."
FAQ_A7_TEXT = "VPN (—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç—É–Ω–Ω–µ–ª—å) –∑–∞—â–∏—â–∞–µ—Ç –≤–∞—à –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Ç—Ä–∞—Ñ–∏–∫ –æ—Ç –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö.\n–≠—Ç–æ –ø–æ–≤—ã—à–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö Wi-Fi –∏ —Å–∫—Ä—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞.\n–ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–¥—ë–∂–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã."
FAQ_A8_TEXT = "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è:\nAndroid: v2rayTun, Husi, AmneziaVPN\niOS/macOS: Streisand, FoXray, v2Box\nWindows: v2rayN, Nekoray\n–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å üë§¬ª."

@router.callback_query(F.data.startswith("pay_kassa_"))
async def callback_payment_method_select(callback: CallbackQuery):
    data = callback.data.replace("pay_kassa_", "")
    if data not in goods.get_callbacks():
        await callback.answer()
        return
    
    good = goods.get(data)
    result = await yookassa.create_payment(
        callback.from_user.id, 
        data, 
        callback.message.chat.id, 
    )

    months = good.get('months')
    if months == 1:
        duration_text = "1 –º–µ—Å—è—Ü"
    elif months in [3, 6]:
        duration_text = f"{months} –º–µ—Å—è—Ü–µ–≤"
    else:
        duration_text = f"{months} –¥–Ω–µ–π" # –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞

    text = f"""   *–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∫—É–ø–∏—Ç—å:* 

üìã {good['title']}
üí∏ **—Å—Ç–æ–∏–º–æ—Å—Ç—å:** {result['amount']}‚ÇΩ

**–û–ø–∏—Å–∞–Ω–∏–µ:**
‚úÖ –ü—Ä–æ–∫—Å–∏ –Ω–∞ **{duration_text}** (–ø—Ä–æ—Ç–æ–∫–æ–ª Vless).
‚Ä¢  **–õ–æ–∫–∞—Ü–∏—è:**
 üá≥üá± –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã. 

üîí –ü–æ–ª–Ω–∞—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å, –Ω–µ —Å–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
üîë **1 –∫–ª—é—á = 1 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.**

‚ö†Ô∏è –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RU —Å–∞–π—Ç–∞–º –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º –±–µ–∑ VPN —Å–º. –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é (–¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ —Å—Å–ª—ã–∫–µ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã).

üëá **–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ–∫–∞**"""

    await callback.message.edit_text(
        text,
        reply_markup=get_pay_keyboard(result['url']),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("pay_crypto_"))
async def callback_payment_method_select(callback: CallbackQuery):
    data = callback.data.replace("pay_crypto_", "")
    if data not in goods.get_callbacks():
        await callback.answer()
        return

    good = goods.get(data)
    result = await cryptomus.create_payment(
        callback.from_user.id, 
        data, 
        callback.message.chat.id, 
    )

    months = good.get('months')
    if months == 1:
        duration_text = "1 –º–µ—Å—è—Ü"
    elif months in [3, 6]:
        duration_text = f"{months} –º–µ—Å—è—Ü–µ–≤"
    else:
        duration_text = f"{months} –¥–Ω–µ–π" # –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞

    text = f"""‚ú® *–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É* ‚ú®

üìã **–ü–æ–¥–ø–∏—Å–∫–∞:** {good['title']}
üí∞ **–¶–µ–Ω–∞:** {result['amount']}$

---

**–û–ø–∏—Å–∞–Ω–∏–µ:**

‚úÖ –ü—Ä–æ–∫—Å–∏ –Ω–∞ **{duration_text}** (–ø—Ä–æ—Ç–æ–∫–æ–ª Vless).
üåç **–õ–æ–∫–∞—Ü–∏—è:** üá≥üá± –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã.

üîí –ü–æ–ª–Ω–∞—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å, –Ω–µ —Å–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
üîë **1 –∫–ª—é—á = 1 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.**

---

üëá **–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:**"""
    await callback.message.edit_text(
        text,
        reply_markup=get_pay_keyboard(result['url']),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data == "buy_subscription_action")
async def handle_buy_subscription_action(callback: CallbackQuery):
    await callback.answer() 
    await callback.message.answer(
        TEXT_CHOOSE_TARIFF_CB, 
        reply_markup=get_buy_menu_keyboard(),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "try_free_action")
async def handle_try_free_action(callback: CallbackQuery):
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id

    # 1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –≤ Marzban
    marzban_profile = await marzban_api.get_marzban_profile(user_id)
    db_profile = await get_marzban_profile_db(user_id) # –ù—É–∂–µ–Ω –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –±—ã–ª–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π

    if marzban_profile and marzban_profile.get('status') == 'active':
        is_currently_test_sub_in_db = db_profile.test if db_profile else False
        
        # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –≤ Marzban –∏ –≤ –Ω–∞—à–µ–π –ë–î –æ–Ω–∞ –ù–ï –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ —Ç–µ—Å—Ç–æ–≤–∞—è,
        # –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –∞–∫—Ç–∏–≤–Ω–∞—è –ü–õ–ê–¢–ù–ê–Ø –ø–æ–¥–ø–∏—Å–∫–∞.
        if not is_currently_test_sub_in_db:
            expire_timestamp = marzban_profile.get('expire')
            expire_date_str = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –¥–∞—Ç—ã"
            if expire_timestamp:
                expire_date_str = datetime.fromtimestamp(expire_timestamp).strftime("%d.%m.%Y %H:%M")
            
            await callback.answer(TEXT_HAS_ACTIVE_PAID_SUB.format(expire_date=expire_date_str), show_alert=True, parse_mode="HTML")
            return
        # –ï—Å–ª–∏ –∂–µ –∞–∫—Ç–∏–≤–Ω–∞ –≤ Marzban, –Ω–æ –≤ –Ω–∞—à–µ–π –ë–î –æ–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è, —Ç–æ –ø–æ–∑–≤–æ–ª—è–µ–º –ª–æ–≥–∏–∫–µ –Ω–∏–∂–µ (–ø—Ä–æ–≤–µ—Ä–∫–∞ already_had_test) —Ä–µ—à–∏—Ç—å.
        # –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–æ–∏–∑–æ–π—Ç–∏, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ" –≤–æ –≤—Ä–µ–º—è —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—Ä–∏–∞–ª–∞.

    # 2. –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ–∫—É—â—É—é –ª–æ–≥–∏–∫—É
    already_had_test_flag = await can_get_test_sub(user_id)
    if already_had_test_flag:
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ already_had_test_flag is True, –Ω–æ –≤ Marzban –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
        # –∏–ª–∏ –æ–Ω–∞ –∏—Å—Ç–µ–∫–ª–∞, —Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ "—É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª".
        # –ï—Å–ª–∏ –∂–µ –≤ Marzban –∞–∫—Ç–∏–≤–Ω–∞—è (–∏ –ø–æ –ª–æ–≥–∏–∫–µ –≤—ã—à–µ —ç—Ç–æ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ç–µ—Å—Ç–æ–≤–∞—è), —Ç–æ —ç—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–∂–µ –ø–æ–∫—Ä—ã—Ç–∞.
        # –í —Ü–µ–ª–æ–º, can_get_test_sub –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≥–ª–∞–≤–Ω—ã–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º —Ç–æ–≥–æ, –±—ã–ª –ª–∏ —Ç–µ—Å—Ç –ò–°–ü–û–õ–¨–ó–û–í–ê–ù.
        await callback.answer(TEXT_ALREADY_USED_TRIAL, show_alert=True)
        return

    # db_user_profile —É–∂–µ –ø–æ–ª—É—á–µ–Ω –≤—ã—à–µ –∫–∞–∫ db_profile
    if not db_profile: # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ—Ç –¥–∞–∂–µ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ –ø–æ—Å–ª–µ /start, –Ω–æ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏)
        await marzban_api.create_user_if_not_exists_in_local_db(user_id, callback.from_user.full_name, callback.from_user.username)
        db_profile = await get_marzban_profile_db(user_id)
        if not db_profile:
             await callback.answer(TEXT_PROFILE_NOT_FOUND_ERROR, show_alert=True)
             return

    try:
        try:
            trial_duration_hours = int(glv.config.get('PERIOD_LIMIT', 7 * 24))
        except ValueError:
            trial_duration_hours = 7 * 24
            print(f"[WARNING] PERIOD_LIMIT in .env is not a valid integer. Defaulting to {trial_duration_hours} hours for trial.")

        marzban_user_data = await marzban_api.generate_test_subscription(
            str(db_profile.tg_id), 
            custom_hours=trial_duration_hours
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞
        await update_test_subscription_state(user_id, is_test=True) # is_test=True, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –≤—ã–¥–∞—á–∞ —Ç—Ä–∏–∞–ª–∞

        final_text = TEXT_TRIAL_SUCCESS.format(
             link=glv.config['PANEL_GLOBAL'] + marzban_user_data['subscription_url']
        )

        await glv.bot.send_message(chat_id, final_text, parse_mode="HTML") # –î–æ–±–∞–≤–∏–º parse_mode –¥–ª—è —Å—Å—ã–ª–∫–∏
        await callback.answer(TEXT_TRIAL_ACTIVATED_ALERT, show_alert=True)

    except Exception as e:
        error_message_for_user = TEXT_TRIAL_ACTIVATION_ERROR
        if callback.message:
             await callback.message.answer(error_message_for_user)
        await callback.answer(error_message_for_user, show_alert=True)
        
        import traceback
        print(f"Error in handle_try_free_action for user {user_id}: {str(e)}")
        print(traceback.format_exc())

@router.callback_query(lambda c: c.data in goods.get_callbacks())
async def callback_payment_select_good(callback: CallbackQuery):
    # await callback.message.delete() # –£–±–∏—Ä–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
    good = goods.get(callback.data)
    # –ó–∞–º–µ–Ω—è–µ–º answer –Ω–∞ edit_text
    await callback.message.edit_text(
        text=TEXT_SELECT_PAYMENT_METHOD, 
        reply_markup=get_payment_keyboard(good)
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ FAQ
@router.callback_query(F.data == "faq_q1")
async def handle_faq_q1(callback: CallbackQuery):
    await callback.answer(FAQ_A1_TEXT, show_alert=True)

@router.callback_query(F.data == "faq_q2")
async def handle_faq_q2(callback: CallbackQuery):
    await callback.answer(FAQ_A2_TEXT, show_alert=True)

@router.callback_query(F.data == "faq_q3")
async def handle_faq_q3(callback: CallbackQuery):
    await callback.answer(FAQ_A3_TEXT, show_alert=True)

@router.callback_query(F.data == "faq_q4")
async def handle_faq_q4(callback: CallbackQuery):
    await callback.answer(FAQ_A4_TEXT, show_alert=True)

@router.callback_query(F.data == "faq_q5")
async def handle_faq_q5(callback: CallbackQuery):
    await callback.answer(FAQ_A5_TEXT, show_alert=True)

@router.callback_query(F.data == "faq_q6")
async def handle_faq_q6(callback: CallbackQuery):
    await callback.answer(FAQ_A6_TEXT, show_alert=True)

@router.callback_query(F.data == "faq_q7")
async def handle_faq_q7(callback: CallbackQuery):
    await callback.answer(FAQ_A7_TEXT, show_alert=True)

@router.callback_query(F.data == "faq_q8")
async def handle_faq_q8(callback: CallbackQuery):
    await callback.answer(FAQ_A8_TEXT, show_alert=True)

def register_callbacks(dp: Dispatcher):
    dp.include_router(router)
