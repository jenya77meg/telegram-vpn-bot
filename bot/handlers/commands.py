from aiogram import Router, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message
from datetime import datetime
# –£–¥–∞–ª—è–µ–º –∏–º–ø–æ—Ä—Ç I18n
# from aiogram.utils.i18n import I18n

from keyboards import get_main_menu_keyboard, get_welcome_keyboard
# utils, marzban_api, get_marzban_profile_db, glv –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏ start, –Ω–æ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω—É–∂–Ω—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
from utils import goods, marzban_api # goods –∏ marzban_api
from db.methods import get_marzban_profile_db, update_test_subscription_state # get_marzban_profile_db –∏ update_test_subscription_state
import glv # glv

router = Router(name="commands-router")

WELCOME_TEXT_RU = (
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –∏ –±—ã—Å—Ç—Ä–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞!\n\n"  # –ó–¥–µ—Å—å –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ \n, —ç—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    "–ù–∞—à VPN –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç:\n"
    "‚úÖ 7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ ‚Äî –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –±–µ–∑ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤!\n"
    "‚úÖ –í—ã—Å–æ–∫—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞, –∏–≥—Ä –∏ —Ä–∞–±–æ—Ç—ã.\n"
    "‚úÖ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫ ‚Äî –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–∫–æ–ª—å–∫–æ —É–≥–æ–¥–Ω–æ.\n"
    "‚úÖ –ü—Ä–æ—Å—Ç–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ –ø–∞—Ä—É –∫–ª–∏–∫–æ–≤.\n\n"
    "üëá –ù–∞—á–Ω–∏—Ç–µ —Å–µ–π—á–∞—Å, –≤—ã–±—Ä–∞–≤ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ:"
)

MAIN_MENU_TEXT_RU = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"

@router.message(
    Command("start")
)
# –£–±–∏—Ä–∞–µ–º i18n –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
async def start(message: Message):
    # –£–±–∏—Ä–∞–µ–º –≤—Å—é –ª–æ–≥–∏–∫—É, —Å–≤—è–∑–∞–Ω–Ω—É—é —Å i18n –∏ lang_code
    # user_lang_code = message.from_user.language_code
    # print(f"[DEEP_DEBUG] User language_code: {user_lang_code}")
    
    # effective_lang_code = 'ru' 

    # print(f"[DEEP_DEBUG] Using effective_lang_code: {effective_lang_code} for aiogram's i18n.gettext().")

    # welcome_text_msgid = "..."
    # main_menu_msgid = "..."

    # translated_welcome_text = welcome_text_msgid
    # translated_main_menu_text = main_menu_msgid

    # if i18n:
    #     translated_welcome_text = i18n.gettext(welcome_text_msgid)
    #     translated_main_menu_text = i18n.gettext(main_menu_msgid)  
    
    # print(f"[DEEP_DEBUG] Welcome text msgid: '{welcome_text_msgid}'")
    # print(f"[DEEP_DEBUG] Translated welcome text by i18n.gettext(): '{translated_welcome_text}'")
    # print(f"[DEEP_DEBUG] Main menu msgid: '{main_menu_msgid}'")
    # print(f"[DEEP_DEBUG] Translated main menu text by i18n.gettext(): '{translated_main_menu_text}'")

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ç–µ–ø–µ—Ä—å –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç lang_code
    await message.answer(WELCOME_TEXT_RU, reply_markup=get_welcome_keyboard())
    await message.answer(MAIN_MENU_TEXT_RU, reply_markup=get_main_menu_keyboard())

# –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –æ–ø–ª–∞—Ç—ã
@router.message(
    Command("simulate_payment_3months")
)
async def simulate_payment_3months(message: Message):
    admin_id_str = glv.config.get('ADMIN_ID')
    if admin_id_str:
        try:
            admin_id = int(admin_id_str)
            if message.from_user.id != admin_id:
                await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
                return
        except ValueError:
            await message.answer("ADMIN_ID –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
            return
    else:
        # –ï—Å–ª–∏ ADMIN_ID –Ω–µ —É–∫–∞–∑–∞–Ω, –º–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∏–ª–∏ —Ä–∞–∑—Ä–µ—à–∏—Ç—å –¥–ª—è –≤—Å–µ—Ö (–¥–ª—è —Ç–µ—Å—Ç–∞)
        print("[WARNING] ADMIN_ID –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ö–æ–º–∞–Ω–¥–∞ simulate_payment_3months –¥–æ—Å—Ç—É–ø–Ω–∞ –≤—Å–µ–º.")

    user_id = message.from_user.id
    chat_id = message.chat.id
    good_id = "vpn_3_months" # ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è 3 –º–µ—Å—è—Ü–µ–≤

    await message.answer(f"–ò–º–∏—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –¥–ª—è —Ç–æ–≤–∞—Ä–∞: {good_id}...")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤)
        selected_good = goods.get(good_id)
        if not selected_good:
            await message.answer(f"–û—à–∏–±–∫–∞: –¢–æ–≤–∞—Ä —Å ID {good_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ goods.json.")
            return
        
        # months = selected_good.get('months') # months –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        # if not months:
        #     await message.answer(f"–û—à–∏–±–∫–∞: –î–ª—è —Ç–æ–≤–∞—Ä–∞ {good_id} –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤.")
        #     return

        # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –æ–±—ã—á–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
        # –≠—Ç–æ marzban_api.generate_marzban_subscription
        new_marzban_user_data = await marzban_api.generate_marzban_subscription(
            str(user_id),       # tg_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            selected_good       # –ü–µ—Ä–µ–¥–∞–µ–º –≤–µ—Å—å –æ–±—ä–µ–∫—Ç —Ç–æ–≤–∞—Ä–∞
        )

        # –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
        await update_test_subscription_state(user_id, is_test=False)

        # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ –≤—Å–µ –µ—â–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å months –∏–∑ selected_good
        months_for_message = selected_good.get('months', 'N/A')

        success_message = (
            f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∏–º–∏—Ç–∞—Ü–∏—è –æ–ø–ª–∞—Ç—ã!\n"
            f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {months_for_message} –º–µ—Å. –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.\n"
            f"–î–µ—Ç–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ (–∏–∑ Marzban):"
            f"Username: {new_marzban_user_data.get('username')}\n"
            f"Status: {new_marzban_user_data.get('status')}\n"
            f"Expires: {datetime.fromtimestamp(new_marzban_user_data.get('expire')).strftime('%d.%m.%Y %H:%M') if new_marzban_user_data.get('expire') else 'N/A'}\n"
            f"Subscription URL: {new_marzban_user_data.get('subscription_url')}"
        )
        await message.answer(success_message)

    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–∏—Ç–∞—Ü–∏–∏ –æ–ø–ª–∞—Ç—ã: {str(e)}")
        import traceback
        print(f"Error in simulate_payment_3months for user {user_id}: {str(e)}")
        print(traceback.format_exc())

def register_commands(dp: Dispatcher):
    dp.include_router(router)
