from aiogram import Router, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message
from datetime import datetime
from aiogram.filters import CommandObject
# –£–¥–∞–ª—è–µ–º –∏–º–ø–æ—Ä—Ç I18n
# from aiogram.utils.i18n import I18n

from keyboards import get_main_menu_keyboard, get_welcome_keyboard, get_back_keyboard
# utils, marzban_api, get_marzban_profile_db, glv –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏ start, –Ω–æ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω—É–∂–Ω—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
from utils import goods, marzban_api # goods –∏ marzban_api
from db.methods import (
    get_marzban_profile_db, 
    update_test_subscription_state,
    add_seller,
    remove_seller,
    get_seller_by_referral_code,
    get_all_sellers,
    add_referral,
    get_referral_by_user,
    create_payout,
    get_payouts_for_seller,
    get_seller_by_id,
    get_seller_by_tg_id,
    count_referrals_for_seller,
    update_seller_details,
    get_all_vpn_users_tg_id
)
import glv # glv
import asyncio
from aiogram.exceptions import TelegramBadRequest
import logging
from utils.marzban_api import panel
import html

router = Router(name="commands-router")

WELCOME_TEXT_RU = (
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞—à —Å–µ—Ä–≤–∏—Å –ø—Ä–µ–¥–ª–æ–≥–∞–µ—Ç:\n\n"  # –ó–¥–µ—Å—å –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ \n, —ç—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    #  "–ù–∞—à —Å–µ—Ä–≤–∏—Å –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ chatgpt, gemini, claude –∏ –¥—Ä—É–≥–∏–º —Å–µ—Ä–≤–∏—Å–∞–º:\n"
    "‚úÖ –ü—Ä–æ—Å—Ç–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ –ø–∞—Ä—É –∫–ª–∏–∫–æ–≤.\n"
    "‚úÖ 7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞!\n"
    "‚úÖ –í—ã—Å–æ–∫—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.\n"
    "‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ä–µ–∫–ª–∞–º—ã –∏ —Ç—Ä–µ–∫–µ—Ä–æ–≤.\n\n"
    "üëá –ù–∞—á–Ω–∏—Ç–µ —Å–µ–π—á–∞—Å, –≤—ã–±—Ä–∞–≤ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ:"
)

MAIN_MENU_TEXT_RU = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
TEXT_SUPPORT_LINK_MESSAGE = "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ <a href=\"{link}\">—Å—Å—ã–ª–∫–µ</a> –∏ –∑–∞–¥–∞–π—Ç–µ –Ω–∞–º –≤–æ–ø—Ä–æ—Å. –ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –ø–æ–º–æ—á—å ü§ó"

@router.message(
    Command("help")
)
async def help_command(message: Message):
    await message.delete()
    await message.answer(
        TEXT_SUPPORT_LINK_MESSAGE.format(link=glv.config['SUPPORT_LINK']),
        reply_markup=get_back_keyboard()
    )

@router.message(
    Command("start")
)
async def start(message: Message, command: CommandObject):
    # --- Referral Logic ---
    referral_code_arg = command.args
    if referral_code_arg and referral_code_arg.startswith("ref_"):
        ref_code = referral_code_arg.split("_", 1)[1]
        user_id = message.from_user.id
        user_mention = f"@{message.from_user.username}" if message.from_user.username else f"ID: {user_id}"
        
        already_referred = await get_referral_by_user(user_id)

        if already_referred:
            # User is already a referral. Notify admin about the attempt to switch.
            original_seller = await get_seller_by_id(already_referred.seller_id)
            new_seller = await get_seller_by_referral_code(ref_code)

            # Check if it's a different seller and both exist, to avoid spamming on same-link clicks
            if new_seller and original_seller and new_seller.id != original_seller.id:
                admin_id = glv.config.get('ADMIN_ID')
                if admin_id:
                    text = (
                        f"üîî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_mention}, –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º –ø—Ä–æ–¥–∞–≤—Ü–∞ "
                        f"'{original_seller.name}' (–∫–æ–¥: {original_seller.referral_code}),\n"
                        f"–ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–µ—Ä–µ–π—Ç–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥–∞–≤—Ü–∞ "
                        f"'{new_seller.name}' (–∫–æ–¥: {new_seller.referral_code}).\n\n"
                        f"–ù–∏–∫–∞–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ."
                    )
                    await glv.bot.send_message(admin_id, text)
        else:
            # This is a new, unassigned user. Assign them.
            seller = await get_seller_by_referral_code(ref_code)
            if seller:
                await add_referral(user_id, seller.id)
                await glv.bot.send_message(
                    seller.tg_id,
                    f"üéâ –£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_mention} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ."
                )

    await message.answer(WELCOME_TEXT_RU, reply_markup=get_welcome_keyboard())
    await message.answer(MAIN_MENU_TEXT_RU, reply_markup=get_main_menu_keyboard())

# –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –æ–ø–ª–∞—Ç—ã
@router.message(
    Command("simulate_payment_3months")
)
async def simulate_payment_3months(message: Message):
    admin_id_str = glv.config.get('ADMIN_ID')
    if admin_id_str:
        try:
            admin_id = int(admin_id_str)
            if message.from_user.id != admin_id:
                await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
                return
        except ValueError:
            await message.answer("ADMIN_ID –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
            return
    else:
        # –ï—Å–ª–∏ ADMIN_ID –Ω–µ —É–∫–∞–∑–∞–Ω, –º–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∏–ª–∏ —Ä–∞–∑—Ä–µ—à–∏—Ç—å –¥–ª—è –≤—Å–µ—Ö (–¥–ª—è —Ç–µ—Å—Ç–∞)
        print("[WARNING] ADMIN_ID –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ö–æ–º–∞–Ω–¥–∞ simulate_payment_3months –¥–æ—Å—Ç—É–ø–Ω–∞ –≤—Å–µ–º.")

    user_id = message.from_user.id
    chat_id = message.chat.id
    good_id = "vpn_3_months" # ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è 3 –º–µ—Å—è—Ü–µ–≤

    await message.answer(f"–ò–º–∏—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –¥–ª—è —Ç–æ–≤–∞—Ä–∞: {good_id}...")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤)
        selected_good = goods.get(good_id)
        if not selected_good:
            await message.answer(f"–û—à–∏–±–∫–∞: –¢–æ–≤–∞—Ä —Å ID {good_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ goods.json.")
            return
        
        # months = selected_good.get('months') # months –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        # if not months:
        #     await message.answer(f"–û—à–∏–±–∫–∞: –î–ª—è —Ç–æ–≤–∞—Ä–∞ {good_id} –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤.")
        #     return

        # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –æ–±—ã—á–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
        # –≠—Ç–æ marzban_api.generate_marzban_subscription
        new_marzban_user_data = await marzban_api.generate_marzban_subscription(
            str(user_id),       # tg_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            selected_good       # –ü–µ—Ä–µ–¥–∞–µ–º –≤–µ—Å—å –æ–±—ä–µ–∫—Ç —Ç–æ–≤–∞—Ä–∞
        )

        # –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
        await update_test_subscription_state(user_id, is_test=False)

        # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ –≤—Å–µ –µ—â–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å months –∏–∑ selected_good
        months_for_message = selected_good.get('months', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')
        expire_date_str = (datetime.fromtimestamp(new_marzban_user_data.get('expire')).strftime('%d.%m.%Y %H:%M') 
                           if new_marzban_user_data.get('expire') 
                           else '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')

        success_message = (
            f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∏–º–∏—Ç–∞—Ü–∏—è –æ–ø–ª–∞—Ç—ã!\n"
            f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {months_for_message} –º–µ—Å. –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.\n"
            f"–î–µ—Ç–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ (–∏–∑ Marzban):\n"
            f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {new_marzban_user_data.get('username')}\n"
            f"–°—Ç–∞—Ç—É—Å: {new_marzban_user_data.get('status')}\n"
            f"–ò—Å—Ç–µ–∫–∞–µ—Ç: {expire_date_str}\n"
            f"URL –ø–æ–¥–ø–∏—Å–∫–∏: {new_marzban_user_data.get('subscription_url')}"
        )
        await message.answer(success_message)

    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–∏—Ç–∞—Ü–∏–∏ –æ–ø–ª–∞—Ç—ã: {str(e)}")
        import traceback
        print(f"Error in simulate_payment_3months for user {user_id}: {str(e)}")
        print(traceback.format_exc())

# --- Seller Self-Service Commands ---

@router.message(Command("my_stats"))
async def my_stats_command(message: Message):
    seller = await get_seller_by_tg_id(message.from_user.id)
    if not seller:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤.")
        return
        
    referral_count = await count_referrals_for_seller(seller.id)
    
    # Escape user data to prevent HTML injection
    safe_seller_name = html.escape(seller.name)
    safe_referral_code = html.escape(seller.referral_code)

    response = (
        f"üìä –í–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç, {safe_seller_name}:\n\n"
        f"Ô∏è–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: <code>{safe_referral_code}</code>\n"
        f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{seller.balance / 100}</b> —Ä—É–±.\n"
        f"üë• –ü—Ä–∏–≤–ª–µ—á–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{referral_count}</b>\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /my_link, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É."
    )
    await message.answer(response, parse_mode="HTML")

@router.message(Command("my_link"))
async def my_link_command(message: Message):
    seller = await get_seller_by_tg_id(message.from_user.id)
    if not seller:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤.")
        return

    bot_user = await glv.bot.get_me()
    bot_username = bot_user.username
    link = f"https://t.me/{bot_username}?start=ref_{seller.referral_code}"
    
    response = (
        f"üîó –í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n\n"
        f"<code>{link}</code>\n\n"
        f"–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π —Å –≤–∞—à–∏–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è."
    )
    await message.answer(response, parse_mode="HTML")

# --- Admin Commands for Seller Management ---
async def is_admin(message: Message) -> bool:
    admin_id_str = glv.config.get('ADMIN_ID')
    if not admin_id_str or not admin_id_str.isdigit():
        return False
    return message.from_user.id == int(admin_id_str)

@router.message(Command("add_seller"))
async def add_seller_command(message: Message, command: CommandObject):
    if not await is_admin(message):
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    args = command.args
    if not args or len(args.split()) != 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_seller &lt;–ò–º—è&gt; &lt;Telegram_ID&gt; &lt;–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π_–∫–æ–¥&gt;")
        return
    
    name, tg_id_str, referral_code = args.split()

    if not tg_id_str.isdigit():
        await message.answer("Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    tg_id = int(tg_id_str)

    try:
        await add_seller(name, tg_id, referral_code)
        await message.answer(f"‚úÖ –ü—Ä–æ–¥–∞–≤–µ—Ü '{name}' —Å –∫–æ–¥–æ–º '{referral_code}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞: {e}")

@router.message(Command("remove_seller"))
async def remove_seller_command(message: Message, command: CommandObject):
    if not await is_admin(message):
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    referral_code = command.args
    if not referral_code:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove_seller &lt;–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π_–∫–æ–¥&gt;")
        return

    try:
        await remove_seller(referral_code.strip())
        await message.answer(f"‚úÖ –ü—Ä–æ–¥–∞–≤–µ—Ü —Å –∫–æ–¥–æ–º '{referral_code}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞: {e}")

@router.message(Command("list_sellers"))
async def list_sellers_command(message: Message):
    if not await is_admin(message):
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    sellers = await get_all_sellers()
    if not sellers:
        await message.answer("–°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ –ø—É—Å—Ç.")
        return

    response = "üë• –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤:\n\n"
    for seller in sellers:
        response += f"–ò–º—è: {seller.name}\n"
        response += f"Telegram ID: {seller.tg_id}\n"
        response += f"–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: {seller.referral_code}\n"
        response += f"–ë–∞–ª–∞–Ω—Å: {seller.balance / 100} —Ä—É–±.\n" # Assuming balance is in kopecks/cents
        response += "-----\n"
    
    await message.answer(response)

@router.message(Command("payout"))
async def payout_command(message: Message, command: CommandObject):
    if not await is_admin(message):
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    args = command.args
    if not args or len(args.split()) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /payout &lt;–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π_–∫–æ–¥&gt; &lt;–°—É–º–º–∞_–≤_—Ä—É–±–ª—è—Ö&gt; [–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π]")
        return
    
    parts = args.split()
    referral_code = parts[0]
    amount_str = parts[1]
    comment = " ".join(parts[2:]) if len(parts) > 2 else None

    if not amount_str.replace('.', '', 1).isdigit():
        await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    
    amount_rub = float(amount_str)
    amount_kopecks = int(amount_rub * 100)

    seller = await get_seller_by_referral_code(referral_code)
    if not seller:
        await message.answer(f"–ü—Ä–æ–¥–∞–≤–µ—Ü —Å –∫–æ–¥–æ–º '{referral_code}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    success = await create_payout(seller.id, amount_kopecks, comment)

    if success:
        await message.answer(
            f"‚úÖ –í—ã–ø–ª–∞—Ç–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ {amount_rub} —Ä—É–±. –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞ '{seller.name}' —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞.\n"
            f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {(seller.balance - amount_kopecks) / 100} —Ä—É–±."
        )
        # Notify seller
        await glv.bot.send_message(
            seller.tg_id,
            f"üí∏ –í–∞–º –±—ã–ª–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –≤—ã–ø–ª–∞—Ç–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ {amount_rub} —Ä—É–±.\n"
            f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment or '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}\n"
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É —Ä–∞–±–æ—Ç—É!"
        )
    else:
        await message.answer(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –≤—ã–ø–ª–∞—Ç—É. "
            f"–í–æ–∑–º–æ–∂–Ω–æ, –±–∞–ª–∞–Ω—Å –ø—Ä–æ–¥–∞–≤—Ü–∞ ({seller.balance / 100} —Ä—É–±.) –º–µ–Ω—å—à–µ —Å—É–º–º—ã –≤—ã–ø–ª–∞—Ç—ã."
        )

@router.message(Command("payout_history"))
async def payout_history_command(message: Message, command: CommandObject):
    if not await is_admin(message):
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    referral_code = command.args
    if not referral_code:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /payout_history &lt;–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π_–∫–æ–¥&gt;")
        return

    seller = await get_seller_by_referral_code(referral_code.strip())
    if not seller:
        await message.answer(f"–ü—Ä–æ–¥–∞–≤–µ—Ü —Å –∫–æ–¥–æ–º '{referral_code}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
        
    payouts = await get_payouts_for_seller(seller.id)

    if not payouts:
        await message.answer(f"–ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–ª–∞—Ç –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞ '{seller.name}' –ø—É—Å—Ç–∞.")
        return

    response = f"üßæ –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–ª–∞—Ç –¥–ª—è '{seller.name}':\n\n"
    for payout in payouts:
        # Parse ISO string to datetime object, then format it
        payout_date = datetime.fromisoformat(payout.payout_date).strftime('%d.%m.%Y %H:%M')
        response += f"–î–∞—Ç–∞: {payout_date}\n"
        response += f"–°—É–º–º–∞: {payout.amount / 100} —Ä—É–±.\n"
        response += f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {payout.comment or '–ù–µ—Ç'}\n"
        response += "-----\n"
        
    await message.answer(response)

@router.message(Command("edit_seller"))
async def edit_seller_command(message: Message, command: CommandObject):
    if not await is_admin(message):
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    args = command.args
    if not args or len(args.split()) != 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /edit_seller &lt;—Å—Ç–∞—Ä—ã–π_–∫–æ–¥&gt; &lt;–ø–æ–ª–µ&gt; &lt;–Ω–æ–≤–æ–µ_–∑–Ω–∞—á–µ–Ω–∏–µ&gt;\n–ü–æ–ª—è: `name`, `tg_id`, `code`")
        return
        
    current_code, field, new_value = args.split()

    if field not in ['name', 'tg_id', 'code']:
        await message.answer(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ '{field}'. –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è: `name`, `tg_id`, `code`.")
        return

    if field == 'tg_id' and not new_value.isdigit():
        await message.answer("–ù–æ–≤—ã–π Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    # To avoid confusion, let's rename 'code' to 'referral_code' for the DB method
    db_field = 'referral_code' if field == 'code' else field
    
    success = await update_seller_details(current_code, db_field, new_value)

    if success:
        await message.answer(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–≤—Ü–∞ —Å (–±—ã–≤—à–∏–º) –∫–æ–¥–æ–º '{current_code}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
    else:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ '{new_value}' —É–∂–µ –∑–∞–Ω—è—Ç.")

@router.message(Command("give_sub"))
async def give_sub_command(message: Message, command: CommandObject):
    if not await is_admin(message):
        return

    args = command.args
    if not args or len(args.split()) != 2:
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /give_sub &lt;Telegram_ID&gt; &lt;ID_–¢–æ–≤–∞—Ä–∞&gt;\n"
            "–ü—Ä–∏–º–µ—Ä: `/give_sub 123456789 vpn_1_month`"
        )
        return

    tg_id_str, good_id = args.split()

    if not tg_id_str.isdigit():
        await message.answer("Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    user_tg_id = int(tg_id_str)
    selected_good = goods.get(good_id)

    if not selected_good:
        await message.answer(f"–¢–æ–≤–∞—Ä —Å ID `{good_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ `goods.json`.")
        return

    try:
        # 1. Issue the subscription
        await marzban_api.generate_marzban_subscription(str(user_tg_id), selected_good)
        await update_test_subscription_state(user_tg_id, is_test=False)
        await message.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ '{selected_good['title']}' —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_tg_id}.")

        # 2. Notify the user
        await glv.bot.send_message(
            user_tg_id,
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤—ã–¥–∞–ª –≤–∞–º –ø–æ–¥–ø–∏—Å–∫—É \"{selected_good['title']}\".\n"
            "–û–Ω–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ \"–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å üë§\"."
        )
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")

@router.message(Command("broadcast"))
async def broadcast_command(message: Message, command: CommandObject):
    if not await is_admin(message):
        return # Silently ignore for non-admins

    if not command.args:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n"
            "–ü—Ä–∏–º–µ—Ä: `/broadcast –°–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω –≤ 15:00`"
        )
        return

    text = command.args
    users = await get_all_vpn_users_tg_id()
    
    await message.answer(f"üì¢ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    success_count = 0
    fail_count = 0
    
    for user_id in users:
        try:
            await glv.bot.send_message(user_id, text, parse_mode="HTML")
            success_count += 1
        except TelegramBadRequest as e:
            # Handle cases where user blocked the bot, etc.
            logging.warning(f"Failed to send message to {user_id}: {e}")
            fail_count += 1
        except Exception as e:
            logging.error(f"An unexpected error occurred when sending to {user_id}: {e}")
            fail_count += 1
        await asyncio.sleep(0.1) # Rate limit sleeping

    await message.answer(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
        f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {fail_count}"
    )

@router.message(Command("broadcast_active"))
async def broadcast_active_command(message: Message, command: CommandObject):
    if not await is_admin(message):
        return

    if not command.args:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n"
            "–ü—Ä–∏–º–µ—Ä: `/broadcast_active –°–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω –≤ 15:00`"
        )
        return

    text = command.args
    
    try:
        marzban_users = await panel.get_users()
        # Filter for active users where username is a valid TG ID
        active_users_ids = [
            int(user['username']) 
            for user in marzban_users.get('users', []) 
            if user['status'] == 'active' and user['username'].isdigit()
        ]
    except Exception as e:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Marzban: {e}")
        return

    await message.answer(f"üì¢ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(active_users_ids)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤...")
    
    success_count = 0
    fail_count = 0
    
    for user_id in active_users_ids:
        try:
            await glv.bot.send_message(user_id, text, parse_mode="HTML")
            success_count += 1
        except TelegramBadRequest as e:
            logging.warning(f"Failed to send message to {user_id}: {e}")
            fail_count += 1
        except Exception as e:
            logging.error(f"An unexpected error occurred when sending to {user_id}: {e}")
            fail_count += 1
        await asyncio.sleep(0.1)

    await message.answer(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
        f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {fail_count}"
    )

def register_commands(dp: Dispatcher):
    dp.include_router(router)
