from aiogram import Router, F
from aiogram import Dispatcher
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime, timedelta
import re # –û—Å—Ç–∞–≤–∏–º re, –µ—Å–ª–∏ escape_markdown_v2 –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≥–¥–µ-—Ç–æ –µ—â–µ –∏–ª–∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è

from .commands import start
# –£–±–µ–¥–∏—Å—å, —á—Ç–æ get_faq_questions_keyboard –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è
from keyboards import (
    get_buy_menu_keyboard, get_back_keyboard, get_main_menu_keyboard,
    get_profile_actions_keyboard, get_faq_questions_keyboard # <--- –í–û–¢ –û–ù
)
from db.methods import can_get_test_sub, update_test_subscription_state, get_marzban_profile_db, get_user_email
from utils import marzban_api
import glv

router = Router(name="messages-router")

TEXT_BUY_SUB = "–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É üõí"
TEXT_MY_PROFILE = "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å üë§"
TEXT_FAQ = "–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã ‚ÑπÔ∏è" # –≠—Ç–∞ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ —É–∂–µ –µ—Å—Ç—å
TEXT_SUPPORT = "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ ‚ù§Ô∏è"
TEXT_BACK = "‚è™ –ù–∞–∑–∞–¥"

TEXT_CHOOSE_TARIFF = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ ‚¨áÔ∏è"
TEXT_PROFILE_NOT_ACTIVE = "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Å–µ–π—á–∞—Å –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥–æ–π /start."
TEXT_SUBSCRIPTION_PAGE = "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ‚¨áÔ∏è"
TEXT_FOLLOW_LINK = "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ <a href=\"{link}\">—Å—Å—ã–ª–∫–µ</a> üîó" # –≠—Ç–∞ —Ç–æ–∂–µ –µ—Å—Ç—å
TEXT_SUPPORT_LINK_MESSAGE = "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ <a href=\"{link}\">—Å—Å—ã–ª–∫–µ</a> –∏ –∑–∞–¥–∞–π—Ç–µ –Ω–∞–º –≤–æ–ø—Ä–æ—Å. –ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –ø–æ–º–æ—á—å ü§ó" # –ò —ç—Ç–∞

# –ù–æ–≤–∞—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ FAQ
TEXT_FAQ_INTRO = "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å:"

# New constants for the profile section
TEXT_SUBSCRIPTION_INSTRUCTION = "–ü–æ–¥–ø–∏—Å–∫–∞ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ"
BUTTON_TEXT_GO_TO_SITE = "–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç"

# –¢–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
TEXT_MAIN_MENU_FOR_BACK_BUTTON = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è MarkdownV2 (–æ—Å—Ç–∞–≤–∏–º –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è)
def escape_markdown_v2(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2."""
    if not isinstance(text, str):
        text = str(text)
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)

@router.message(F.text == TEXT_BUY_SUB)
async def buy(message: Message):
    await message.delete()
    await message.answer(TEXT_CHOOSE_TARIFF, reply_markup=get_buy_menu_keyboard())

@router.message(F.text == TEXT_MY_PROFILE)
async def profile(message: Message):
    await message.delete()
    tg_id = message.from_user.id
    user_full_name = message.from_user.full_name
    
    profile_info_parts = [f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:<b>{user_full_name}</b>"]
    profile_info_parts.append(f"Telegram ID:<b>{tg_id}</b>")

    # –ü–æ–ª—É—á–∞–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_email = await get_user_email(tg_id)
    if user_email:
        profile_info_parts.append(f"–í–∞—à email: <b>{user_email}</b>")
    else:
        profile_info_parts.append("–í–∞—à email: <b>–ù–µ —É–∫–∞–∑–∞–Ω</b>")

    # ... (–æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ profile –∏–∑ —Ç–≤–æ–µ–≥–æ —Ñ–∞–π–ª–∞) ...
    marzban_user_data = await marzban_api.get_marzban_profile(tg_id) # –î–æ–±–∞–≤–∏–ª –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã, –µ—Å–ª–∏ —ç—Ç–æ–≥–æ –Ω–µ—Ç
    db_user_profile = await get_marzban_profile_db(tg_id) # –î–æ–±–∞–≤–∏–ª –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã

    status_sub_val = "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
    type_sub_val = "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    expire_date_val = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    
    show_renew_button = False
    show_buy_button = False

    if marzban_user_data:
        marzban_status = marzban_user_data.get('status', 'disabled')
        if marzban_status == 'active':
            status_sub_val = "–ê–∫—Ç–∏–≤–Ω–∞ ‚úÖ"
        elif marzban_status == 'disabled':
            status_sub_val = "–û—Ç–∫–ª—é—á–µ–Ω–∞ üîò"
        elif marzban_status == 'expired':
            status_sub_val = "–ò—Å—Ç–µ–∫–ª–∞ ‚åõÔ∏è"
        elif marzban_status == 'limited':
            status_sub_val = "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ ‚ö†Ô∏è"
        else:
            status_sub_val = f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å ({marzban_status}) ‚ùì"

        expire_timestamp = marzban_user_data.get('expire')
        if expire_timestamp:
            expire_datetime = datetime.fromtimestamp(expire_timestamp)
            expire_date_val = expire_datetime.strftime("%d.%m.%Y %H:%M")
            if marzban_status == 'active' and (expire_datetime - datetime.now()) < timedelta(days=5):
                show_renew_button = True
        else:
            expire_date_val = "–ë–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è (–∏–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)"
            if marzban_status != 'active':
                 show_buy_button = True 

        if db_user_profile and db_user_profile.test:
            if marzban_status == 'active' or (marzban_status == 'expired' and expire_timestamp and datetime.fromtimestamp(expire_timestamp) > datetime.now() - timedelta(days=1)):
                type_sub_val = "–ü—Ä–æ–±–Ω–∞—è üöÄ"
                show_buy_button = True 
            elif marzban_status == 'disabled' and not expire_timestamp :
                 type_sub_val = "–ü—Ä–æ–±–Ω–∞—è (–æ—Ç–º–µ–Ω–µ–Ω–∞) üö´"
                 show_buy_button = True
            else: 
                type_sub_val = "–ü—Ä–æ–±–Ω–∞—è (–∑–∞–≤–µ—Ä—à–µ–Ω–∞) üèÅ"
                show_buy_button = True 
        elif marzban_status == 'active': 
            type_sub_val = "–ü–ª–∞—Ç–Ω–∞—è üí≥"
        else: 
            type_sub_val = "–ü–ª–∞—Ç–Ω–∞—è (–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞) üí§"
            show_buy_button = True
    else: 
        status_sub_val = "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ VPN —Å–∏—Å—Ç–µ–º–µ ü§∑‚Äç‚ôÇÔ∏è"
        type_sub_val = "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        expire_date_val = "-"
        show_buy_button = True 
        if db_user_profile and db_user_profile.test: 
             type_sub_val = "–ü—Ä–æ–±–Ω–∞—è (–Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ VPN) ü§î"
             
    profile_info_parts.append(f"–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: <b>{status_sub_val}</b>")
    profile_info_parts.append(f"–¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏: <b>{type_sub_val}</b>")
    profile_info_parts.append(f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: <b>{expire_date_val}</b>")

    reply_markup_profile: InlineKeyboardMarkup | None = get_profile_actions_keyboard(show_renew=show_renew_button, show_buy=show_buy_button) # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
    
    await message.answer("\n".join(profile_info_parts), reply_markup=reply_markup_profile, parse_mode="HTML")

    if marzban_user_data and marzban_user_data.get('subscription_url'):
        site_button = InlineKeyboardButton(
            text=BUTTON_TEXT_GO_TO_SITE,
            url=marzban_user_data.get('subscription_url')
        )
        site_keyboard = InlineKeyboardMarkup(inline_keyboard=[[site_button]])
        await message.answer(
            TEXT_SUBSCRIPTION_INSTRUCTION,
            reply_markup=site_keyboard,
            disable_notification=True
        )

@router.message(F.text == TEXT_FAQ)
async def information(message: Message): # –≠—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    await message.delete()
    await message.answer(
        TEXT_FAQ_INTRO,
        reply_markup=get_faq_questions_keyboard() # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )

@router.message(F.text == TEXT_SUPPORT)
async def support(message: Message):
    await message.delete()
    await message.answer(
        TEXT_SUPPORT_LINK_MESSAGE.format(link=glv.config['SUPPORT_LINK']),
        reply_markup=get_back_keyboard()) # –ó–¥–µ—Å—å get_back_keyboard() - —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤–µ–¥—É—â–∞—è –≤ FAQ –∏–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é?

@router.message(F.text == TEXT_BACK)
async def back_to_main_menu(message: Message):
    await message.delete()
    await message.answer(TEXT_MAIN_MENU_FOR_BACK_BUTTON, reply_markup=get_main_menu_keyboard())

def register_messages(dp: Dispatcher):
    dp.include_router(router)
