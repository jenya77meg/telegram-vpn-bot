import asyncio
import logging
import time
from datetime import datetime, timedelta

from aiogram.utils.keyboard import InlineKeyboardBuilder

from db.methods import get_marzban_profile_db
from utils.marzban_api import panel

import glv


def format_relative_date(expire_timestamp: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç."""
    now = datetime.now()
    expire_dt = datetime.fromtimestamp(expire_timestamp)
    time_str = expire_dt.strftime('%H:%M')

    if now.date() == expire_dt.date():
        return f"—Å–µ–≥–æ–¥–Ω—è –≤ {time_str}"
    
    if (expire_dt.date() - now.date()) == timedelta(days=1):
        return f"–∑–∞–≤—Ç—Ä–∞ –≤ {time_str}"
    
    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ - –±–æ–ª–µ–µ –ø—Ä–∏—è—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    months = [
        "—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è",
        "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"
    ]
    month_name = months[expire_dt.month - 1]
    return f"{expire_dt.day} {month_name} –≤ {time_str}"


async def notify_users_to_renew_sub():
    try:
        users_to_notify = await get_marzban_users_to_notify()
        if not users_to_notify:
            return

        for user_data in users_to_notify:
            username = user_data.get('username')
            if not username or not username.isdigit():
                continue
            
            tg_id = int(username)
            user = await get_marzban_profile_db(tg_id)

            if user is None:
                logging.warning(f"User with tg_id {tg_id} from Marzban not found in local DB.")
                continue

            try:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
                expire_timestamp = user_data.get('expire')
                expire_date_str = format_relative_date(expire_timestamp)
                
                chat_member = await glv.bot.get_chat_member(user.tg_id, user.tg_id)
                message = (
                    f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {chat_member.user.first_name} üëãüèª\n\n"
                    "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º ‚ù§Ô∏è\nÔ∏è\n"
                    f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—Ç–µ–∫–∞–µ—Ç <b>{expire_date_str}</b>.\n\n"
                    "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–ª–∏—Ç—å –µ–µ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá"
                )

                # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É
                builder = InlineKeyboardBuilder()
                builder.button(text="–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É üõí", callback_data="buy_subscription_action")
                
                await glv.bot.send_message(
                    user.tg_id, 
                    message, 
                    reply_markup=builder.as_markup(),
                    parse_mode="HTML"
                )
            except Exception as e:
                logging.error(f"Failed to send renewal notification to user {user.tg_id}: {e}")

    except Exception as e:
        logging.error(f"An error occurred in the notify_users_to_renew_sub task: {e}")


async def get_marzban_users_to_notify():
    try:
        res = await panel.get_users()
        if res is None or 'users' not in res:
            return None
        users = res.get('users', [])
        return filter(filter_users_to_notify, users)
    except Exception as e:
        logging.error(f"Failed to get users from Marzban for notification task: {e}")
        return None


def filter_users_to_notify(user):
    user_expire_date = user.get('expire')
    if not isinstance(user_expire_date, int):
        return False
    # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ç–µ—Ö, —á—å—è –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ 24-48 —á–∞—Å–æ–≤
    # (–≠—Ç–æ –±–æ–ª–µ–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∏ –º–µ–Ω–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥, —á–µ–º 12-36 —á–∞—Å–æ–≤)
    now = int(time.time())
    from_date = now + (24 * 60 * 60) # 24 —á–∞—Å–∞ –æ—Ç —Å–µ–π—á–∞—Å
    to_date = now + (48 * 60 * 60)   # 48 —á–∞—Å–æ–≤ –æ—Ç —Å–µ–π—á–∞—Å
    return from_date < user_expire_date < to_date
