import asyncio
import logging
import time
from datetime import datetime

from aiogram.utils.keyboard import InlineKeyboardBuilder

from db.methods import get_marzban_profile_db
from utils.marzban_api import panel
import glv


def filter_expired_users(user):
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —á—å—è –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞."""
    user_expire_date = user.get('expire')
    status = user.get('status')

    # –ù–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'expired' –∏–ª–∏ 'disabled'
    if not isinstance(user_expire_date, int) or status not in ['expired', 'disabled']:
        return False

    now = int(time.time())
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ä–æ–∫ –∏—Å—Ç–µ–∫ –≤ –ø—Ä–æ–º–µ–∂—É—Ç–∫–µ –æ—Ç 24 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥ –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞.
    # –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.
    twenty_four_hours_ago = now - (24 * 60 * 60)
    return twenty_four_hours_ago < user_expire_date <= now


async def get_marzban_users_to_notify_expired():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–∑ Marzban —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏."""
    try:
        res = await panel.get_users()
        if not res or 'users' not in res:
            return None
        users = res.get('users', [])
        return filter(filter_expired_users, users)
    except Exception as e:
        logging.error(f"Failed to get users from Marzban for expired notification task: {e}")
        return None


async def notify_expired_users_task():
    """–ó–∞–¥–∞—á–∞ –ø–æ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π."""
    try:
        users_to_notify = await get_marzban_users_to_notify_expired()
        if not users_to_notify:
            return

        for user_data in users_to_notify:
            username = user_data.get('username')
            if not username or not username.isdigit():
                continue
            
            tg_id = int(username)
            user = await get_marzban_profile_db(tg_id)

            if user is None:
                logging.warning(f"Expired user with tg_id {tg_id} from Marzban not found in local DB.")
                continue

            try:
                chat_member = await glv.bot.get_chat_member(user.tg_id, user.tg_id)
                message = (
                    f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {chat_member.user.first_name}.\n\n"
                    "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—Ç–µ–∫, –∏ –¥–æ—Å—Ç—É–ø –∫ VPN –±—ã–ª –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.\n\n"
                    "–ß—Ç–æ–±—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É."
                )

                builder = InlineKeyboardBuilder()
                builder.button(text="–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É üõí", callback_data="buy_subscription_action")
                
                await glv.bot.send_message(
                    user.tg_id, 
                    message, 
                    reply_markup=builder.as_markup()
                )
            except Exception as e:
                logging.error(f"Failed to send expired notification to user {user.tg_id}: {e}")

    except Exception as e:
        logging.error(f"An error occurred in the notify_expired_users_task: {e}") 